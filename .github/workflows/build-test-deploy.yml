# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Get Artifact Version
        id: get_artifact_version
        run: |
          VERSION=$(curl -s "<JFROG_ARTIFACTORY_URL>/api/storage/<ARTIFACT_PATH>?properties=version" -H \
          "X-JFrog-Art-Api:${{secrets.JFROG_API_KEY}}" | grep -Po '(?<=version=).*' | tail -1)
          echo "::set-output name=version::$VERSION"

      - name: Login to Azure Registry
        uses: azure/docker-login@v1
        with:
          login-server: <REGISTRY_NAME>
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        uses: azure/docker@v1
        with:
          context: .
          dockerfile: Dockerfile
          imageName: <REGISTRY_NAME>.azurecr.io/<IMAGE_NAME>
          imageTags: |
            ${{ steps.get_artifact_version.outputs.version }}
