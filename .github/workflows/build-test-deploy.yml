# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission to gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Tag with Artifact Version
        id: artifact_version
        run: echo "::set-output name= tag::$(curl https://jfrog.example.com /artifactory/api/storage/YOUR_REPOSITORY/YOUR_ARTIFACT_PATH?properties=version | grep -oP '\bversion=\K\S+')"
      - name: log tag
        run: echo ${{ steps.artifact_version.outputs.tag }}
      - name: Login to Azure Registry
        uses: azure/docker-login@v1
        with:
          login-server: <azure registry server name>
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
      - name: Push DOCKER image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: <azure registry server name>/<repository name>:${{ steps.artifact_version.outputs.tag }}


